node {
    def app

    stage('Stoppen aller laufenden Container') {
        try {
            /* Stoppen der Container aus Frontend */
            sh 'docker stop da_gui'
            sh 'docker stop da_persistierung'
            sh 'docker stop da_mysql'
            sh 'docker stop da_phpmyadmin'
            echo 'Container KIT Frontend gestoppt'
            }
        catch (Exception e) {
            echo 'Container Frontend stoppen nicht möglich:  ' + e.toString()
            }
        try {
            /* Stoppen der Container aus Backend */
            sh 'docker stop da_backend'
            echo 'Container Backend gestoppt'
            }
        catch (Exception e) {
            echo 'Container Backend stoppen nicht möglich:  ' + e.toString()
            }
        try {
            sh 'docker rm $(docker ps -a -q)'
            echo 'Gestoppte Container erfolgreich entfernt'
            }
        catch (Exception e) {
            echo 'docker rm nicht erfolgreich' + e.toString()
        }
    }

    stage('Clone des Github-Repository Frontend') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Konfiguration Mock-Routing') {
        sh 'cd /var/lib/jenkins/workspace/Demoanwendung_Frontend_ST/app/config'
        sh 'mv /var/lib/jenkins/workspace/Demoanwendung_Frontend_ST/app/config/config.ini /var/lib/jenkins/workspace/Demoanwendung_Frontend_ST/app/config/onfig_Original.ini'
        sh 'mv config_Pact.ini config.ini'
    }

    stage('Build Frontend') {
        sh 'docker-compose build'
    }

    stage('Start der Frontend-Container') {
        sh 'docker-compose up -d --remove-orphans'
      //  sh 'docker exec -i flaskdemo_db_1 mysql -h db -uroot -p"root" < /var/lib/jenkins/workspace/Demoanwendung_Frontend_SIT/db/init.sql'
    }

    stage('Container-Netzwerk aufbauen') {
        sh 'docker network prune'
        sh 'docker network connect demoNetz da_gui'
        sh 'docker network connect demoNetz da_persistierung'
        sh 'docker network connect demoNetz da_mysql'
    }

    stage('Build & Deploy des Backend') {
        build job: 'Demoanwendung_Backend'
    }






}